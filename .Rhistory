library(igraph)
library(dplyr)
#load("fullTimelines.RData")
#load("users.RData")
#timelines %>% filter(retweet_user_id %in% users$user_id) -> seledges
csvedges <- read.csv('graph.csv')
df <- data.frame(csvedges)
df <- select(df, c('from', 'to', 'weight'))
graph <- graph_from_data_frame(df, directed = F)
friends <- df %>%
filter(from == 4611686018468695677 | to == 4611686018468695677) %>%
filter(weight > 10)
friendsoffriends <- df %>% filter(from %in% friends$to | to %in% friends$to | from %in% friends$from | from %in% friends$to)%>%
filter(weight > 10)
friendsgraph <- graph_from_data_frame(friends, directed = F)
fofgraph <- graph_from_data_frame(friendsoffriends, directed = F)
#Your code here
clusterlouvain <- cluster_louvain(fofgraph)
modularity(clusterlouvain)
library(networkD3)
graph2 <- igraph_to_networkD3(fofgraph)
graph2$nodes$comm <- as.character(membership(clusterlouvain))
chargevec = -30 / (friendsoffriends$weight/sqrt(sum(friendsoffriends$weight^2))) -22
forceNetwork(Links=graph2$links, Nodes=graph2$nodes, NodeID="name", Group="comm", zoom=T, opacity = 1, opacityNoHover = 1)
forceNetwork(Links=graph2$links, Nodes=graph2$nodes, NodeID="hi", Group="comm", zoom=T, opacity = 1, opacityNoHover = 1)
forceNetwork(Links=graph2$links, Nodes=graph2$nodes, NodeID="name", Group="comm", zoom=T, opacity = 1, opacityNoHover = 1)
? igraph_to_networkD3
? graph_from_data_frame
csvvertices <- read.csv('vertices.csv')
vdf <- data.frame(csvvertices)
head(vdf)
? read.csv
csvvertices <- read.csv('vertices.csv', header=F)
vdf <- data.frame(csvvertices)
head(vdf)
csvvertices <- read.csv('vertices.csv', header=F)
vdf <- data.frame(csvvertices)
head(vdf)
csvvertices <- read.csv('vertices.csv')
vdf <- data.frame(csvvertices)
head(vdf)
vdf <- data.frame(csvvertices) %>% select(['name','label'])
csvvertices <- read.csv('vertices.csv')
vdf <- data.frame(csvvertices) %>% select('name','label')
head(vdf)
fofgraph <- graph_from_data_frame(friendsoffriends, directed = F, vertices = vdf)
csvvertices <- read.csv('vertices.csv')
vdf <- data.frame(csvvertices) %>% select('name','label')
vdf %>% group_by('name') %>% summarise(count = n()) %>% order_by('count')
#load("fullTimelines.RData")
#load("users.RData")
#timelines %>% filter(retweet_user_id %in% users$user_id) -> seledges
csvedges <- read.csv('graph.csv')
df <- data.frame(csvedges)
df <- select(df, c('from', 'to', 'weight'))
graph <- graph_from_data_frame(df, directed = F)
csvvertices <- read.csv('vertices.csv')
vdf <- data.frame(csvvertices) %>% select('name','label')
vdf %>% group_by('name') %>% summarise(count = n()) %>% order_by('count')
vdf %>% group_by('name') %>% summarise(n()) %>% order_by('count')
vdf %>% group_by('name') %>% summarise(n())
vdf %>% group_by(name) %>% summarise(n())
vdf %>% group_by(name) %>% count()
vdf <- data.frame(csvvertices) %>% select('name','label') %>% unique()
vdf %>% group_by(name) %>% count()
friends <- df %>%
filter(from == 4611686018468695677 | to == 4611686018468695677) %>%
filter(weight > 10)
friendsoffriends <- df %>% filter(from %in% friends$to | to %in% friends$to | from %in% friends$from | from %in% friends$to)%>%
filter(weight > 10)
friendsgraph <- graph_from_data_frame(friends, directed = F)
fofgraph <- graph_from_data_frame(friendsoffriends, directed = F, vertices = vdf)
vdf %>% group_by(name) %>% count() %>% order_by(n)
?order_by
vdf %>% group_by(name) %>% count() %>% order()
? order
vdf %>% group_by(name) %>% count() %>% order(partial = 'name')
? arrange
vdf %>% group_by(name) %>% count() %>% arrange(desc(n))
